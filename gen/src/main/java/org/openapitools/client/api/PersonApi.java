/*
 * Swagger Person
 * This is a sample server Person server.
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.FilterDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PersonApi {
    private ApiClient localVarApiClient;

    public PersonApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PersonApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getAllPerson
     * @param page Results page you want to retrieve (0..N) (required)
     * @param size Number of records per page. (required)
     * @param sort Sorting criteria (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllPersonCall(Integer page, Integer size, String sort, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/person";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllPersonValidateBeforeCall(Integer page, Integer size, String sort, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling getAllPerson(Async)");
        }
        
        // verify the required parameter 'size' is set
        if (size == null) {
            throw new ApiException("Missing the required parameter 'size' when calling getAllPerson(Async)");
        }
        
        // verify the required parameter 'sort' is set
        if (sort == null) {
            throw new ApiException("Missing the required parameter 'sort' when calling getAllPerson(Async)");
        }
        

        okhttp3.Call localVarCall = getAllPersonCall(page, size, sort, _callback);
        return localVarCall;

    }

    /**
     * Get all person and generate filter data for providing sorting and/or filtering entry
     * 
     * @param page Results page you want to retrieve (0..N) (required)
     * @param size Number of records per page. (required)
     * @param sort Sorting criteria (required)
     * @return List&lt;FilterDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<FilterDto> getAllPerson(Integer page, Integer size, String sort) throws ApiException {
        ApiResponse<List<FilterDto>> localVarResp = getAllPersonWithHttpInfo(page, size, sort);
        return localVarResp.getData();
    }

    /**
     * Get all person and generate filter data for providing sorting and/or filtering entry
     * 
     * @param page Results page you want to retrieve (0..N) (required)
     * @param size Number of records per page. (required)
     * @param sort Sorting criteria (required)
     * @return ApiResponse&lt;List&lt;FilterDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<FilterDto>> getAllPersonWithHttpInfo(Integer page, Integer size, String sort) throws ApiException {
        okhttp3.Call localVarCall = getAllPersonValidateBeforeCall(page, size, sort, null);
        Type localVarReturnType = new TypeToken<List<FilterDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all person and generate filter data for providing sorting and/or filtering entry (asynchronously)
     * 
     * @param page Results page you want to retrieve (0..N) (required)
     * @param size Number of records per page. (required)
     * @param sort Sorting criteria (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllPersonAsync(Integer page, Integer size, String sort, final ApiCallback<List<FilterDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllPersonValidateBeforeCall(page, size, sort, _callback);
        Type localVarReturnType = new TypeToken<List<FilterDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPersonsFiltered
     * @param page Results page you want to retrieve (0..N) (required)
     * @param size Number of records per page. (required)
     * @param sort Sorting criteria (required)
     * @param filterDto Filter data for parsing parament filter query (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPersonsFilteredCall(Integer page, Integer size, String sort, FilterDto filterDto, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = filterDto;

        // create path and map variables
        String localVarPath = "/person";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPersonsFilteredValidateBeforeCall(Integer page, Integer size, String sort, FilterDto filterDto, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling getPersonsFiltered(Async)");
        }
        
        // verify the required parameter 'size' is set
        if (size == null) {
            throw new ApiException("Missing the required parameter 'size' when calling getPersonsFiltered(Async)");
        }
        
        // verify the required parameter 'sort' is set
        if (sort == null) {
            throw new ApiException("Missing the required parameter 'sort' when calling getPersonsFiltered(Async)");
        }
        
        // verify the required parameter 'filterDto' is set
        if (filterDto == null) {
            throw new ApiException("Missing the required parameter 'filterDto' when calling getPersonsFiltered(Async)");
        }
        

        okhttp3.Call localVarCall = getPersonsFilteredCall(page, size, sort, filterDto, _callback);
        return localVarCall;

    }

    /**
     * The sorting and/or filtering options person data
     * Provides sorting and/or filtering options
     * @param page Results page you want to retrieve (0..N) (required)
     * @param size Number of records per page. (required)
     * @param sort Sorting criteria (required)
     * @param filterDto Filter data for parsing parament filter query (required)
     * @return List&lt;FilterDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public List<FilterDto> getPersonsFiltered(Integer page, Integer size, String sort, FilterDto filterDto) throws ApiException {
        ApiResponse<List<FilterDto>> localVarResp = getPersonsFilteredWithHttpInfo(page, size, sort, filterDto);
        return localVarResp.getData();
    }

    /**
     * The sorting and/or filtering options person data
     * Provides sorting and/or filtering options
     * @param page Results page you want to retrieve (0..N) (required)
     * @param size Number of records per page. (required)
     * @param sort Sorting criteria (required)
     * @param filterDto Filter data for parsing parament filter query (required)
     * @return ApiResponse&lt;List&lt;FilterDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<FilterDto>> getPersonsFilteredWithHttpInfo(Integer page, Integer size, String sort, FilterDto filterDto) throws ApiException {
        okhttp3.Call localVarCall = getPersonsFilteredValidateBeforeCall(page, size, sort, filterDto, null);
        Type localVarReturnType = new TypeToken<List<FilterDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * The sorting and/or filtering options person data (asynchronously)
     * Provides sorting and/or filtering options
     * @param page Results page you want to retrieve (0..N) (required)
     * @param size Number of records per page. (required)
     * @param sort Sorting criteria (required)
     * @param filterDto Filter data for parsing parament filter query (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPersonsFilteredAsync(Integer page, Integer size, String sort, FilterDto filterDto, final ApiCallback<List<FilterDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPersonsFilteredValidateBeforeCall(page, size, sort, filterDto, _callback);
        Type localVarReturnType = new TypeToken<List<FilterDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
