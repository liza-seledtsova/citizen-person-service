/*
 * Swagger Person
 * This is a sample server Person server.
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * FilterDataDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-04-07T16:46:15.773536+03:00[Europe/Minsk]")
public class FilterDataDto {
  /**
   * sort query
   */
  @JsonAdapter(SortingEnum.Adapter.class)
  public enum SortingEnum {
    ASC("ASC"),
    
    DESC("DESC");

    private String value;

    SortingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SortingEnum fromValue(String value) {
      for (SortingEnum b : SortingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SortingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SortingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SortingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SortingEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SORTING = "sorting";
  @SerializedName(SERIALIZED_NAME_SORTING)
  private SortingEnum sorting;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private List<String> value = null;

  public static final String SERIALIZED_NAME_SELECT = "select";
  @SerializedName(SERIALIZED_NAME_SELECT)
  private List<String> select = null;

  /**
   * name field to filter entry
   */
  @JsonAdapter(FilterNameEnum.Adapter.class)
  public enum FilterNameEnum {
    FIRST_NAME("FIRST_NAME"),
    
    SURNAME("SURNAME"),
    
    ADDRESS1("ADDRESS1"),
    
    ADDRESS2("ADDRESS2"),
    
    CITY("CITY"),
    
    STATE("STATE"),
    
    POSTCODE("POSTCODE"),
    
    COUNTRY_CODE("COUNTRY_CODE"),
    
    GENDER("GENDER"),
    
    DATE_OF_BIRTH("DATE_OF_BIRTH");

    private String value;

    FilterNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FilterNameEnum fromValue(String value) {
      for (FilterNameEnum b : FilterNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FilterNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FilterNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FilterNameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FilterNameEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FILTER_NAME = "filterName";
  @SerializedName(SERIALIZED_NAME_FILTER_NAME)
  private FilterNameEnum filterName;

  /**
   * type of filer for building query
   */
  @JsonAdapter(FilterTypeEnum.Adapter.class)
  public enum FilterTypeEnum {
    SELECT("SELECT"),
    
    RANGE("RANGE");

    private String value;

    FilterTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FilterTypeEnum fromValue(String value) {
      for (FilterTypeEnum b : FilterTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FilterTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FilterTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FilterTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FilterTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FILTER_TYPE = "filterType";
  @SerializedName(SERIALIZED_NAME_FILTER_TYPE)
  private FilterTypeEnum filterType;

  public static final String SERIALIZED_NAME_GROUP_BY = "groupBy";
  @SerializedName(SERIALIZED_NAME_GROUP_BY)
  private Boolean groupBy = false;


  public FilterDataDto sorting(SortingEnum sorting) {
    
    this.sorting = sorting;
    return this;
  }

   /**
   * sort query
   * @return sorting
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "sort query")

  public SortingEnum getSorting() {
    return sorting;
  }


  public void setSorting(SortingEnum sorting) {
    this.sorting = sorting;
  }


  public FilterDataDto value(List<String> value) {
    
    this.value = value;
    return this;
  }

  public FilterDataDto addValueItem(String valueItem) {
    if (this.value == null) {
      this.value = new ArrayList<String>();
    }
    this.value.add(valueItem);
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"Fred\",\"Bob\",\"Nancy\",\"Alan\"]", value = "")

  public List<String> getValue() {
    return value;
  }


  public void setValue(List<String> value) {
    this.value = value;
  }


  public FilterDataDto select(List<String> select) {
    
    this.select = select;
    return this;
  }

  public FilterDataDto addSelectItem(String selectItem) {
    if (this.select == null) {
      this.select = new ArrayList<String>();
    }
    this.select.add(selectItem);
    return this;
  }

   /**
   * Get select
   * @return select
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"Fred\",\"Nancy\"]", value = "")

  public List<String> getSelect() {
    return select;
  }


  public void setSelect(List<String> select) {
    this.select = select;
  }


  public FilterDataDto filterName(FilterNameEnum filterName) {
    
    this.filterName = filterName;
    return this;
  }

   /**
   * name field to filter entry
   * @return filterName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "name field to filter entry")

  public FilterNameEnum getFilterName() {
    return filterName;
  }


  public void setFilterName(FilterNameEnum filterName) {
    this.filterName = filterName;
  }


  public FilterDataDto filterType(FilterTypeEnum filterType) {
    
    this.filterType = filterType;
    return this;
  }

   /**
   * type of filer for building query
   * @return filterType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "type of filer for building query")

  public FilterTypeEnum getFilterType() {
    return filterType;
  }


  public void setFilterType(FilterTypeEnum filterType) {
    this.filterType = filterType;
  }


  public FilterDataDto groupBy(Boolean groupBy) {
    
    this.groupBy = groupBy;
    return this;
  }

   /**
   * Get groupBy
   * @return groupBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getGroupBy() {
    return groupBy;
  }


  public void setGroupBy(Boolean groupBy) {
    this.groupBy = groupBy;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilterDataDto filterDataDto = (FilterDataDto) o;
    return Objects.equals(this.sorting, filterDataDto.sorting) &&
        Objects.equals(this.value, filterDataDto.value) &&
        Objects.equals(this.select, filterDataDto.select) &&
        Objects.equals(this.filterName, filterDataDto.filterName) &&
        Objects.equals(this.filterType, filterDataDto.filterType) &&
        Objects.equals(this.groupBy, filterDataDto.groupBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sorting, value, select, filterName, filterType, groupBy);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilterDataDto {\n");
    sb.append("    sorting: ").append(toIndentedString(sorting)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    select: ").append(toIndentedString(select)).append("\n");
    sb.append("    filterName: ").append(toIndentedString(filterName)).append("\n");
    sb.append("    filterType: ").append(toIndentedString(filterType)).append("\n");
    sb.append("    groupBy: ").append(toIndentedString(groupBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

