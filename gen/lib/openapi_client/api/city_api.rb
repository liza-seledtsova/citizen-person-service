=begin
#Person API

#Person Information Service

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module OpenapiClient
  class CityApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create city
    # @param city_dto [CityDto] 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def create_city(city_dto, opts = {})
      data, _status_code, _headers = create_city_with_http_info(city_dto, opts)
      data
    end

    # Create city
    # @param city_dto [CityDto] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def create_city_with_http_info(city_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CityApi.create_city ...'
      end
      # verify the required parameter 'city_dto' is set
      if @api_client.config.client_side_validation && city_dto.nil?
        fail ArgumentError, "Missing the required parameter 'city_dto' when calling CityApi.create_city"
      end
      # resource path
      local_var_path = '/api/v1/city'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(city_dto)

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CityApi.create_city",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CityApi#create_city\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete city by id
    # @param city_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def delete_city(city_id, opts = {})
      data, _status_code, _headers = delete_city_with_http_info(city_id, opts)
      data
    end

    # Delete city by id
    # @param city_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def delete_city_with_http_info(city_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CityApi.delete_city ...'
      end
      # verify the required parameter 'city_id' is set
      if @api_client.config.client_side_validation && city_id.nil?
        fail ArgumentError, "Missing the required parameter 'city_id' when calling CityApi.delete_city"
      end
      # resource path
      local_var_path = '/api/v1/city/{cityId}'.sub('{' + 'cityId' + '}', CGI.escape(city_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CityApi.delete_city",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CityApi#delete_city\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get All city
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_all_city(opts = {})
      data, _status_code, _headers = get_all_city_with_http_info(opts)
      data
    end

    # Get All city
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_all_city_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CityApi.get_all_city ...'
      end
      # resource path
      local_var_path = '/api/v1/city'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CityApi.get_all_city",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CityApi#get_all_city\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # get city by id
    # @param city_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_city_by_id(city_id, opts = {})
      data, _status_code, _headers = get_city_by_id_with_http_info(city_id, opts)
      data
    end

    # get city by id
    # @param city_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_city_by_id_with_http_info(city_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CityApi.get_city_by_id ...'
      end
      # verify the required parameter 'city_id' is set
      if @api_client.config.client_side_validation && city_id.nil?
        fail ArgumentError, "Missing the required parameter 'city_id' when calling CityApi.get_city_by_id"
      end
      # resource path
      local_var_path = '/api/v1/city/{cityId}'.sub('{' + 'cityId' + '}', CGI.escape(city_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CityApi.get_city_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CityApi#get_city_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Merge  city a from dto to entity
    # @param city_dto [CityDto] 
    # @param [Hash] opts the optional parameters
    # @return [String]
    def update_city(city_dto, opts = {})
      data, _status_code, _headers = update_city_with_http_info(city_dto, opts)
      data
    end

    # Merge  city a from dto to entity
    # @param city_dto [CityDto] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def update_city_with_http_info(city_dto, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CityApi.update_city ...'
      end
      # verify the required parameter 'city_dto' is set
      if @api_client.config.client_side_validation && city_dto.nil?
        fail ArgumentError, "Missing the required parameter 'city_dto' when calling CityApi.update_city"
      end
      # resource path
      local_var_path = '/api/v1/city'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(city_dto)

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"CityApi.update_city",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CityApi#update_city\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
