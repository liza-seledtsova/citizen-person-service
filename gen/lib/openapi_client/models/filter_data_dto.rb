=begin
#Person API

#Person Information Service

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module OpenapiClient
  class FilterDataDto
    # enum to sort value
    attr_accessor :sorting

    # list of avaliable value filed to sample data from entry
    attr_accessor :value

    # list of selected value from list of value for building query
    attr_accessor :select

    # name of field to filter data on this field
    attr_accessor :filter_name

    # filter depends on the data format.Select - string value(name, surname). Range - number format(price, date)
    attr_accessor :filter_type

    attr_accessor :group_by

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'sorting' => :'sorting',
        :'value' => :'value',
        :'select' => :'select',
        :'filter_name' => :'filterName',
        :'filter_type' => :'filterType',
        :'group_by' => :'groupBy'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'sorting' => :'String',
        :'value' => :'Array<String>',
        :'select' => :'Array<String>',
        :'filter_name' => :'String',
        :'filter_type' => :'String',
        :'group_by' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::FilterDataDto` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::FilterDataDto`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'sorting')
        self.sorting = attributes[:'sorting']
      end

      if attributes.key?(:'value')
        if (value = attributes[:'value']).is_a?(Array)
          self.value = value
        end
      end

      if attributes.key?(:'select')
        if (value = attributes[:'select']).is_a?(Array)
          self.select = value
        end
      end

      if attributes.key?(:'filter_name')
        self.filter_name = attributes[:'filter_name']
      end

      if attributes.key?(:'filter_type')
        self.filter_type = attributes[:'filter_type']
      end

      if attributes.key?(:'group_by')
        self.group_by = attributes[:'group_by']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      sorting_validator = EnumAttributeValidator.new('String', ["ASC", "DESC"])
      return false unless sorting_validator.valid?(@sorting)
      filter_name_validator = EnumAttributeValidator.new('String', ["FIRST_NAME", "SURNAME", "ADDRESS1", "ADDRESS2", "CITY", "STATE", "POSTCODE", "COUNTRY_CODE", "GENDER", "DATE_OF_BIRTH"])
      return false unless filter_name_validator.valid?(@filter_name)
      filter_type_validator = EnumAttributeValidator.new('String', ["SELECT", "RANGE"])
      return false unless filter_type_validator.valid?(@filter_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sorting Object to be assigned
    def sorting=(sorting)
      validator = EnumAttributeValidator.new('String', ["ASC", "DESC"])
      unless validator.valid?(sorting)
        fail ArgumentError, "invalid value for \"sorting\", must be one of #{validator.allowable_values}."
      end
      @sorting = sorting
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] filter_name Object to be assigned
    def filter_name=(filter_name)
      validator = EnumAttributeValidator.new('String', ["FIRST_NAME", "SURNAME", "ADDRESS1", "ADDRESS2", "CITY", "STATE", "POSTCODE", "COUNTRY_CODE", "GENDER", "DATE_OF_BIRTH"])
      unless validator.valid?(filter_name)
        fail ArgumentError, "invalid value for \"filter_name\", must be one of #{validator.allowable_values}."
      end
      @filter_name = filter_name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] filter_type Object to be assigned
    def filter_type=(filter_type)
      validator = EnumAttributeValidator.new('String', ["SELECT", "RANGE"])
      unless validator.valid?(filter_type)
        fail ArgumentError, "invalid value for \"filter_type\", must be one of #{validator.allowable_values}."
      end
      @filter_type = filter_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          sorting == o.sorting &&
          value == o.value &&
          select == o.select &&
          filter_name == o.filter_name &&
          filter_type == o.filter_type &&
          group_by == o.group_by
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [sorting, value, select, filter_name, filter_type, group_by].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
