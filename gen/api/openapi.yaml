openapi: 3.0.1
info:
  contact:
    email: apiteam@swagger.io
  description: This is a sample server Person server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Person
  version: 1.0.1
servers:
- url: /person.swagger.io/v1
paths:
  /person:
    get:
      operationId: getAllPerson
      parameters:
      - description: Results page you want to retrieve (0..N)
        explode: true
        in: query
        name: page
        required: true
        schema:
          type: integer
        style: form
      - description: Number of records per page.
        explode: true
        in: query
        name: size
        required: true
        schema:
          type: integer
        style: form
      - description: Sorting criteria
        explode: true
        in: query
        name: sort
        required: true
        schema:
          enum:
          - ASC
          - DESC
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/FilterDto'
                type: array
          description: successful operation
      summary: Get all person and generate filter data for providing sorting and/or
        filtering entry
      tags:
      - person
      x-accepts: application/json
    post:
      description: Provides sorting and/or filtering options
      operationId: getPersonsFiltered
      parameters:
      - description: Results page you want to retrieve (0..N)
        explode: true
        in: query
        name: page
        required: true
        schema:
          type: integer
        style: form
      - description: Number of records per page.
        explode: true
        in: query
        name: size
        required: true
        schema:
          type: integer
        style: form
      - description: Sorting criteria
        explode: true
        in: query
        name: sort
        required: true
        schema:
          enum:
          - ASC
          - DESC
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterDto'
        description: Filter data for parsing parament filter query
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/FilterDto'
                type: array
          description: successful operation
      summary: The sorting and/or filtering options person data
      tags:
      - person
      x-contentType: application/json
      x-accepts: application/json
components:
  schemas:
    Person:
      example:
        firstName: firstName
        address:
        - address2: address2
          city:
            name: name
            id: 1
            state:
              country:
                countryCode: countryCode
                id: 5
              name: name
              id: 5
          address1: address1
          postCode: postCode
          id: 6
        - address2: address2
          city:
            name: name
            id: 1
            state:
              country:
                countryCode: countryCode
                id: 5
              name: name
              id: 5
          address1: address1
          postCode: postCode
          id: 6
        gender: M
        surname: surname
        dateOfBirth: 2000-01-23
        id: 0
      properties:
        id:
          format: int64
          type: integer
        firstName:
          type: string
        surname:
          type: string
        dateOfBirth:
          format: date
          type: string
        gender:
          description: gender person
          enum:
          - M
          - F
          type: string
        address:
          items:
            $ref: '#/components/schemas/Address'
          type: array
      type: object
    Address:
      example:
        address2: address2
        city:
          name: name
          id: 1
          state:
            country:
              countryCode: countryCode
              id: 5
            name: name
            id: 5
        address1: address1
        postCode: postCode
        id: 6
      properties:
        id:
          format: int64
          type: integer
        address1:
          type: string
        address2:
          type: string
        postCode:
          type: string
        city:
          $ref: '#/components/schemas/City'
      type: object
      xml:
        name: Address
    City:
      example:
        name: name
        id: 1
        state:
          country:
            countryCode: countryCode
            id: 5
          name: name
          id: 5
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
        state:
          $ref: '#/components/schemas/State'
      type: object
      xml:
        name: City
    State:
      example:
        country:
          countryCode: countryCode
          id: 5
        name: name
        id: 5
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
        country:
          $ref: '#/components/schemas/Country'
      type: object
      xml:
        name: City
    Country:
      example:
        countryCode: countryCode
        id: 5
      properties:
        id:
          format: int64
          type: integer
        countryCode:
          type: string
      type: object
      xml:
        name: Country
    FilterDto:
      example:
        result:
        - firstName: firstName
          address:
          - address2: address2
            city:
              name: name
              id: 1
              state:
                country:
                  countryCode: countryCode
                  id: 5
                name: name
                id: 5
            address1: address1
            postCode: postCode
            id: 6
          - address2: address2
            city:
              name: name
              id: 1
              state:
                country:
                  countryCode: countryCode
                  id: 5
                name: name
                id: 5
            address1: address1
            postCode: postCode
            id: 6
          gender: M
          surname: surname
          dateOfBirth: 2000-01-23
          id: 0
        - firstName: firstName
          address:
          - address2: address2
            city:
              name: name
              id: 1
              state:
                country:
                  countryCode: countryCode
                  id: 5
                name: name
                id: 5
            address1: address1
            postCode: postCode
            id: 6
          - address2: address2
            city:
              name: name
              id: 1
              state:
                country:
                  countryCode: countryCode
                  id: 5
                name: name
                id: 5
            address1: address1
            postCode: postCode
            id: 6
          gender: M
          surname: surname
          dateOfBirth: 2000-01-23
          id: 0
        selectedField: FIRST_NAME
        filterDataDto:
        - select:
          - Fred
          - Nancy
          sorting: ASC
          filterName: FIRST_NAME
          groupBy: false
          filterType: SELECT
          value:
          - Fred
          - Bob
          - Nancy
          - Alan
        - select:
          - Fred
          - Nancy
          sorting: ASC
          filterName: FIRST_NAME
          groupBy: false
          filterType: SELECT
          value:
          - Fred
          - Bob
          - Nancy
          - Alan
      properties:
        result:
          items:
            $ref: '#/components/schemas/Person'
          type: array
        selectedField:
          example: FIRST_NAME
          type: string
        filterDataDto:
          items:
            $ref: '#/components/schemas/FilterDataDto'
          type: array
      type: object
      xml:
        name: Person
    FilterDataDto:
      example:
        select:
        - Fred
        - Nancy
        sorting: ASC
        filterName: FIRST_NAME
        groupBy: false
        filterType: SELECT
        value:
        - Fred
        - Bob
        - Nancy
        - Alan
      properties:
        sorting:
          description: sort query
          enum:
          - ASC
          - DESC
          type: string
        value:
          example:
          - Fred
          - Bob
          - Nancy
          - Alan
          items:
            type: string
          type: array
        select:
          example:
          - Fred
          - Nancy
          items:
            type: string
          type: array
        filterName:
          description: name field to filter entry
          enum:
          - FIRST_NAME
          - SURNAME
          - ADDRESS1
          - ADDRESS2
          - CITY
          - STATE
          - POSTCODE
          - COUNTRY_CODE
          - GENDER
          - DATE_OF_BIRTH
          type: string
        filterType:
          description: type of filer for building query
          enum:
          - SELECT
          - RANGE
          type: string
        groupBy:
          default: false
          type: boolean
      type: object
      xml:
        name: Person
    ApiResponse:
      properties:
        code:
          format: int32
          type: integer
        type:
          type: string
        message:
          type: string
      type: object

