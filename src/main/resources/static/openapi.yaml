openapi: 3.0.1
info:
  title: Swagger Person
  description: 'This is a sample server Person server.'
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.1
paths:
  /api/v1/persons:
    post:
      tags:
      - person
      summary: Get all person and generate filter data for providing sorting and/or filtering entry
      description: ""
      operationId: getAllPerson
      requestBody:
        description: Pageble
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Pageable"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FilterDto'
  /api/v1/persons/filter:
    post:
      tags:
      - person
      summary: The sorting and/or filtering options person data
      description: Provides sorting and/or filtering options
      operationId: getPersonsFiltered
      requestBody:
        description: Filter data for parsing parament filter query
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filterDto:
                  "$ref": "#/components/schemas/FilterDto"
                pageable:
                  "$ref": "#/components/schemas/Pageable"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FilterDto'
components:
  schemas:
    Person:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        surname:
          type: string
        dateOfBirth:
          type: string
          format: date
        gender:
          type: string
          description: gender person
          enum:
          - M
          - F
        address:
          type: array
          items:
            $ref: '#/components/schemas/Address'
    Address:
      type: object
      properties:
        id:
          type: integer
          format: int64
        address1:
          type: string
        address2:
          type: string
        postCode:
          type: string
        city:
          $ref: '#/components/schemas/City'
      xml:
        name: Address
    City:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        state:
          $ref: '#/components/schemas/State'
      xml:
        name: City
    State:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        country:
          $ref: '#/components/schemas/Country'
      xml:
        name: City
    Country:
      type: object
      properties:
        id:
          type: integer
          format: int64
        countryCode:
          type: string
      xml:
        name: Country
    FilterDto:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/Person'
        selectedField:
          type: string
          example: "FIRST_NAME"
        filterDataDto:
          type: array
          items:
            $ref: '#/components/schemas/FilterDataDto'
      xml:
        name: Person
    Pageable:
      type: object
      properties:
        page:
          minimum: 1
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          example: ["ASC"]
          description: sort query
          enum:
            - ASC
            - DESC
    Sort:
      type: object
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean
        empty:
          type: boolean
    PagePerson:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        pageable:
          "$ref": "#/components/schemas/PageableObject"
        number:
          type: integer
          format: int32
        sort:
          "$ref": "#/components/schemas/Sort"
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            "$ref": "#/components/schemas/Person"
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        sort:
          "$ref": "#/components/schemas/Sort"
        paged:
          type: boolean
        unpaged:
          type: boolean
        offset:
          type: integer
          format: int64
    FilterDataDto:
      type: object
      properties:
        sorting:
          type: string
          description: sort query
          enum:
          - ASC
          - DESC
        value:
          type: array
          items:
            type: string
          example: ["Fred", "Bob", "Nancy", "Alan"]  
        select:
          type: array
          items:
            type: string
          example: ["Fred", "Nancy"]    
        filterName:
          type: string
          description: name field to filter entry
          enum:
          - FIRST_NAME
          - SURNAME
          - ADDRESS1
          - ADDRESS2
          - CITY
          - STATE
          - POSTCODE
          - COUNTRY_CODE
          - GENDER
          - DATE_OF_BIRTH
        filterType:
          type: string
          description: type of filer for building query
          enum:
          - SELECT
          - RANGE
        groupBy:
          type: boolean
          default: false
      xml:
        name: Person
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
