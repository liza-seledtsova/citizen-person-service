---
openapi: 3.0.1
info:
  title: Person API
  description: Person Information
  version: '1.0'
servers:
  - url: http://localhost:8081
    description: Generated server url
paths:
  "/api/v1/persons":
    post:
      tags:
        - person-controller
      operationId: getAllPersons
      description: get all person and generate filter data to filter and sort entity for /api/v1/persons/filter point
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Pageable"
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
  "/api/v1/persons/filter":
    post:
      tags:
        - person-controller
      operationId: getPersonsFiltered
      description: filter entity person with pair of properties
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/FilterDto"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
components:
  schemas:
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string
    Address:
      type: object
      properties:
        id:
          type: integer
          format: int64
        address1:
          type: string
        address2:
          type: string
        postCode:
          type: string
        city:
          "$ref": "#/components/schemas/City"
    City:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        state:
          "$ref": "#/components/schemas/State"
    Country:
      type: object
      properties:
        id:
          type: integer
          format: int64
        countryCode:
          type: string
    FilterDataDto:
      type: object
      properties:
        sorting:
          description: enum to sort value
          type: string
          enum:
            - ASC
            - DESC
        value:
          description: list of avaliable value filed to sample data from entry
          example: [Glasgow, Southend]
          type: array
          items:
            type: string
        select:
          description: list of selected value from list of value for building query
          type: array
          example: [Glasgow, Southend]
          items:
            type: string
        filterName:
          type: string
          description: name of field to filter data on this field
          example: CITY
          enum:
            - FIRST_NAME
            - SURNAME
            - ADDRESS1
            - ADDRESS2
            - CITY
            - STATE
            - POSTCODE
            - COUNTRY_CODE
            - GENDER
            - DATE_OF_BIRTH
        filterType:
          example: SELECT
          description: filter depends on the data format.Select - string value(name, surname). Range - number format(price, date)
          type: string
          enum:
            - SELECT
            - RANGE
        groupBy:
          example: false
          type: boolean
    FilterDto:
      type: object
      properties:
        result:
          description: filtering and sorting result
          "$ref": "#/components/schemas/PageImplPerson"
        filterDataDto:
          type: array
          description: list of filter properties for each field in entry
          items:
            "$ref": "#/components/schemas/FilterDataDto"
        selectedField:
          type: string
    PageImplPerson:
      type: object
      properties:
        content:
          description: filtering and sorting result
          type: array
          items:
            "$ref": "#/components/schemas/Person"
        number:
          example: 1
          type: integer
          format: int32
        size:
          example: 1
          type: integer
          format: int32
        pageable:
          "$ref": "#/components/schemas/PageableObject"
        totalElements:
          type: integer
          format: int64
        last:
          type: boolean
        totalPages:
          type: integer
          format: int32
        first:
          type: boolean
        sort:
          "$ref": "#/components/schemas/Sort"
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        sort:
          "$ref": "#/components/schemas/Sort"
        paged:
          type: boolean
        unpaged:
          type: boolean
        offset:
          example: 0
          type: integer
          format: int64
    Person:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        surname:
          type: string
        gender:
          type: string
        dateOfBirth:
          type: string
          format: date-time
        address:
          type: array
          items:
            "$ref": "#/components/schemas/Address"
    Sort:
      type: object
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean
        empty:
          type: boolean
    State:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        country:
          "$ref": "#/components/schemas/Country"
